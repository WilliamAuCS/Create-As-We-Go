{"version":3,"sources":["../../src/common/AsteroidsGameEngine.js"],"names":["AsteroidsGameEngine","options","physicsEngine","P2PhysicsEngine","gameEngine","world","defaultContactMaterial","friction","on","warpAll","bind","Object","assign","lives","shipSize","shipTurnSpeed","shipSpeed","bulletRadius","bulletLifeTime","asteroidRadius","numAsteroidLevels","numAsteroidVerts","maxAsteroidSpeed","spaceWidth","spaceHeight","SHIP","Math","pow","BULLET","ASTEROID","forEachObject","id","obj","p","position","x","y","refreshToPhysics","serializer","registerClass","Ship","Asteroid","Bullet","inputData","playerId","playerShip","queryObject","instanceType","input","physicsObj","applyForceLocal","angle","emit","refreshFromPhysics","random","s","mass","angularVelocity","TwoVector","velocity","addObjectToWorld","rand","vx","vy","va","a","level","asteroid","bullet","asteroidBody","r","removeObjectFromWorld","angleDisturb","PI","i","subAsteroid","cos","sin","trace","info","toString","GameEngine"],"mappings":"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","sourcesContent":["import { GameEngine, P2PhysicsEngine, TwoVector } from 'lance-gg';\nimport Asteroid from './Asteroid';\nimport Bullet from './Bullet';\nimport Ship from './Ship';\n\nexport default class AsteroidsGameEngine extends GameEngine {\n\n    constructor(options) {\n        super(options);\n\n        // create physics with no friction; wrap positions after each step\n        this.physicsEngine = new P2PhysicsEngine({ gameEngine: this });\n        this.physicsEngine.world.defaultContactMaterial.friction = 0;\n        this.on('postStep', this.warpAll.bind(this));\n\n        // game variables\n        Object.assign(this, {\n            lives: 3, shipSize: 0.3, shipTurnSpeed: 0.05, shipSpeed: 2, bulletRadius: 0.03, bulletLifeTime: 60,\n            asteroidRadius: 0.9, numAsteroidLevels: 4, numAsteroidVerts: 6, maxAsteroidSpeed: 2,\n            spaceWidth: 16, spaceHeight: 9, SHIP: Math.pow(2, 1), BULLET: Math.pow(2, 2), ASTEROID: Math.pow(2, 3)\n        });\n    }\n\n    // If the body is out of space bounds, warp it to the other side\n    warpAll() {\n        this.world.forEachObject((id, obj) => {\n            let p = obj.position;\n            if(p.x > this.spaceWidth/2) p.x = -this.spaceWidth/2;\n            if(p.y > this.spaceHeight/2) p.y = -this.spaceHeight/2;\n            if(p.x < -this.spaceWidth /2) p.x = this.spaceWidth/2;\n            if(p.y < -this.spaceHeight/2) p.y = this.spaceHeight/2;\n            obj.refreshToPhysics();\n        });\n    }\n\n    registerClasses(serializer) {\n        serializer.registerClass(Ship);\n        serializer.registerClass(Asteroid);\n        serializer.registerClass(Bullet);\n    }\n\n    processInput(inputData, playerId) {\n\n        super.processInput(inputData, playerId);\n\n        // handle keyboard presses\n        let playerShip = this.world.queryObject({ playerId: playerId, instanceType: Ship });\n        if (playerShip) {\n            if (inputData.input === 'up') playerShip.physicsObj.applyForceLocal([0, this.shipSpeed]);\n            else if (inputData.input === 'right') playerShip.physicsObj.angle -= this.shipTurnSpeed;\n            else if (inputData.input === 'left') playerShip.physicsObj.angle += this.shipTurnSpeed;\n            else if (inputData.input === 'space') this.emit('shoot', playerShip);\n            playerShip.refreshFromPhysics();\n        }\n    }\n\n    // returns a random number between -0.5 and 0.5\n    rand() {\n        return Math.random() - 0.5;\n    }\n\n    // create ship\n    addShip(playerId) {\n        let s = new Ship(this, {}, {\n            playerId: playerId,\n            mass: 10, angularVelocity: 0,\n            position: new TwoVector(0, 0), velocity: new TwoVector(0, 0)\n        });\n        s.lives = this.lives;\n        this.addObjectToWorld(s);\n    }\n\n    // create asteroids\n    addAsteroids() {\n        let x = this.rand() * this.spaceWidth;\n        let y = this.rand() * this.spaceHeight;\n        let vx = this.rand() * this.maxAsteroidSpeed;\n        let vy = this.rand() * this.maxAsteroidSpeed;\n        let va = this.rand() * this.maxAsteroidSpeed;\n\n        // Create asteroid Body\n        let a = new Asteroid(this, {}, {\n            mass: 10,\n            position: new TwoVector(x, y),\n            velocity: new TwoVector(vx, vy),\n            angularVelocity: va\n        });\n        a.level = 0;\n        this.addObjectToWorld(a);\n    }\n\n    // asteroid explosion\n    explode(asteroid, bullet) {\n\n        // Remove asteroid and bullet\n        let asteroidBody = asteroid.physicsObj;\n        let level = asteroid.level;\n        let x = asteroidBody.position[0];\n        let y = asteroidBody.position[1];\n        let r = this.asteroidRadius * (this.numAsteroidLevels - level) / this.numAsteroidLevels;\n        this.removeObjectFromWorld(asteroid);\n        this.removeObjectFromWorld(bullet);\n\n        // Add new sub-asteroids\n        if (level < 3) {\n            let angleDisturb = Math.PI/2 * Math.random();\n            for (let i=0; i<4; i++) {\n                let angle = Math.PI/2 * i + angleDisturb;\n                let subAsteroid = new Asteroid(this, {}, {\n                    mass: 10,\n                    position: new TwoVector(x + r * Math.cos(angle), y + r * Math.sin(angle)),\n                    velocity: new TwoVector(this.rand(), this.rand())\n                });\n                subAsteroid.level = level + 1;\n                this.trace.info(() => `creating sub-asteroid with radius ${r}: ${subAsteroid.toString()}`);\n                this.addObjectToWorld(subAsteroid);\n            }\n        }\n    }\n}\n"],"file":"AsteroidsGameEngine.js"}